version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Your code here
            echo "Workflow ID : ${CIRCLE_WORKFLOW_ID:0:7}"
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}

            echo "Removing content from S3 bucket"
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$(curl --insecure https://kvdb.io/Bjxqxe6Te8k9RVfMbT49bm/migration_${CIRCLE_WORKFLOW_ID:0:7})
            if(( $SUCCESS==1 ))
            then
              cd ~/project/backend
              npm install
            #  Add revert code here. You can find this in the Getting Started section.
              npm run migrations:revert
            fi  



jobs:
# BUILD PHASE
# Build the Frontend Project
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

# Build the Backend Project
  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

# TEST PHASE
# Unit Test for Frontend Project
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-build]
      # Your job code here
      - run:
          name: Run the Frontend Unit Test
          command: |
            cd frontend
            npm install
            npm run test
                
  test-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-build]
      # Your job code here
      - run:
          name: Run the Backend Unit Test
          command: |
            cd backend
            npm install
            npm run test

# ANALYZE PHASE
# Lint Frontend to check the vulnerability
  scan-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: 
            - frontend-build
      # Your job code here
      - run:
          name: Lint Frontend Project
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force

# Lint Backend Project to check the vulnerabilities
  scan-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-build]
      # Your job code here
      - run:
          name: Lint Backend Project
          command: |
            cd backend
            npm install
            npm audit --audit-level=critical --force

######################################################
## STEPS FOR CONTINUOUS DEPLOYMENT STARTS FROM HERE ##
######################################################

#****************************************************#
#             1. INFRASTRUCTURE PHASE                #
#****************************************************#

# Steps to deploy the infrastructure 
  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project="udapeople" \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
              # exit 1
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project="udapeople" \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
              # exit 1
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            cd .circleci/ansible
            echo "[web]" > inventory.txt
            aws ec2 describe-instances \
            --query "Reservations[*].Instances[*].PublicIpAddress" \
            --filter "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --output text >> inventory.txt
            cat inventory.txt
            # exit 1
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure 
      - destroy-environment    

# Configure Infrastructure - Setting up EC2 instance as backend
  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.11-rc-alpine
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["f9:f3:e1:94:16:e7:4f:02:0d:7d:16:bb:c5:84:06:b4"] 

      # attach workspace
      - attach_workspace:
          at: ~/

      - run:
          name: Install dependencies
          command: |
            # Your code here
            apk add tar gzip
            apk add --update ansible
            pip install awscli 
            # exit 1

      - run:
          name: Configure server
          command: |
            # Your code here
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml

      # Here's where you will add some code to rollback on failure 
      - destroy-environment     


#****************************************************#
#                2. DEPLOY PHASE                     #
#****************************************************#

# 2.1 Database Migration
  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-build]

      - run:
          name: Run migrations and send results to kvdb
          command: |
            # Your code here
            cd backend
            npm install
            npm run migrations:revert
            # Run and save the migration output
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt

            echo "Workflow ID : ${CIRCLE_WORKFLOW_ID:0:7}"
            cat ~/project/backend/migrations_dump.txt
            if grep -q "has been executed successfully" ~/project/backend/migrations_dump.txt
            then
                echo "insecure" >> ~/.curlrc
                curl https://kvdb.io/Bjxqxe6Te8k9RVfMbT49bm/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
      # Here's where you will add some code to rollback on failure 
      - revert-migrations
      - destroy-environment

# 2.2 Deploy Frontend
  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image:  python:3.11-rc-alpine
    steps:
      # Checkout code from git
      - checkout 

      - run:
          name: Install dependencies tar and gzip
          command: |
            # your code here
            apk add --update tar gzip

      - attach_workspace:
          at: ~/
            
      - run:
          name: Install dependencies ansible
          command: |
            # your code here
            apk add --update ansible
            
      - run:
          name: Install dependencies npm
          command: |
            # your code here
            apk add --update npm
            
      - run:
          name: Install dependencies curl
          command: |
            # your code here
            apk add --update curl

      - run:
          name: Install dependencies awscli
          command: |
            # your code here
            pip install awscli

      - run:
          name: Get backend url
          command: |
            # your code here
            export BACKEND_IP=$(aws ec2 describe-instances --filter "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --query Reservations[*].Instances[*].PublicIpAddress --output text)
            echo "${BACKEND_IP}"
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
            
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            
      # Here's where you will add some code to rollback on failure 
            # your code here
      - revert-migrations
      - destroy-environment      

# 2.3 Deploy Backend
  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      - image:  python:3.11-rc-alpine
    steps:
      # Checkout code from git
      - checkout 

      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["f9:f3:e1:94:16:e7:4f:02:0d:7d:16:bb:c5:84:06:b4"] 

      - run:
          name: Install dependencies tar and gzip
          command: |
            # your code here
            apk add --update tar gzip  

      # attach workspace
      - attach_workspace:
          at: ~/

      - run:
          name: Install dependencies
          command: |
            # your code here
            apk add --update ansible nodejs curl
            apk add --update npm -u
            pip install awscli

      - run:
          name: Deploy backend
          # increasing the timeout window from default 10m to 30m during copy
          no_output_timeout: "30m"
          command: |
            # your code here
            cd backend
            npm i
            npm run build
            mkdir /tmp/backendcp/
            cp ./package.json /tmp/backendcp/
            # Zip the backend file
            tar -czvf /tmp/backendcp/backend.tar.gz .
            cd ..
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml

      # Here's where you will add some code to rollback on failure  
      - revert-migrations
      - destroy-environment

#****************************************************#
#            3. SMOKE TEST PHASE                     #
#****************************************************#

  smoke-test:
    docker:
      # Lightweight Docker image 
      - image: python:3.11-rc-alpine
    steps:
      # Checkout code from git
      - checkout 
      - run:
          name: Install dependencies tar and gzip
          command: |
            # your code here
            apk add --update tar gzip

      - attach_workspace:
          at: ~/

      - run:
          name: Install dependencies
          command: |
            # your code here
            apk add --update npm nodejs curl
            pip install awscli

      - run:
          name: Get backend url and smoke test
          command: |
            # your code here
            cat .circleci/ansible/inventory.txt
            export BACKEND_IP=$(cat .circleci/ansible/inventory.txt | sed 1d)
            echo "${BACKEND_IP}"
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            # your code here
            if curl "${API_URL}/api/status" | grep "ok"
            then
                return 0
            else
                return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            # your code here
            # Frontend URL
            Frontend_URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com"
            echo ${Frontend_URL} 
            if curl -s ${Frontend_URL} | grep "Welcome"
            then
            # Change this to 0 after the job fails
               return 1
            else
               return 1
            fi
      # Here's where you will add some code to rollback on failure 
      - revert-migrations
      - destroy-environment

#****************************************************#
#             4. PROMOTION  PHASE                    #
#****************************************************#

# Add Green Infrastructure in production
  cloudfront-update:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
    
      - run:
          name: Install dependencies
          command: |
            # your code here
            yum install -y tar gzip
            yum install -y awscli

      - attach_workspace:
          at: ~/
      
      - run:
          name: Update cloudfront distribution
          command: |
            # your code here
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name Udapeople-cloudfront \
            --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=udapeople
      # Here's where you will add some code to rollback on failure  
      - revert-migrations
      - destroy-environment

#****************************************************#
#             6. CLEAN UP   PHASE                    #
#****************************************************#
  cleanup:
    docker:
      # Docker image here
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Get old stack workflow id and Remove old stacks and files
          command: |
            # your code here
            export OldWorkflowID=$(aws cloudformation \
                                   list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                                   --no-paginate --output text)
            echo OldWorkflowID: "${OldWorkflowID}"
            echo CurrentWorkflowID: "${CIRCLE_WORKFLOW_ID:0:7}"
            # Fetch the Stack Name 
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                             --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
            echo Stack names: "${STACKS[@]}"    

            if [[ "${CIRCLE_WORKFLOW_ID:0:7}" == "${OldWorkflowID}"  ]]
            then
              # your code here
              echo "No old stack to delete"
            else
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              echo "Old stack has been deleted successfully!!"
            fi

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires:
            - build-frontend
      - test-backend:
          requires:
            - build-backend
      - scan-frontend:
          requires:
            - build-frontend
            - test-frontend
      - scan-backend:
         requires:
            - build-backend
            - test-backend
      # - deploy-infrastructure:
      #     requires: 
      #       - test-frontend
      #       - test-backend
      #       - scan-frontend
      #       - scan-backend
      # - configure-infrastructure:
      #     requires: 
      #       - deploy-infrastructure
      # - run-migrations:
      #     requires: 
      #       - configure-infrastructure
      # - deploy-frontend:
      #     requires: 
      #       - run-migrations
      # - deploy-backend:
      #     requires: 
      #       - run-migrations
      #       - deploy-frontend
      # - smoke-test:
      #     requires:
      #       - deploy-frontend
      #       - deploy-backend
      # - cloudfront-update:
      #     requires: 
      #       - smoke-test
      # - cleanup:
      #     requires:
      #       - cloudfront-update
